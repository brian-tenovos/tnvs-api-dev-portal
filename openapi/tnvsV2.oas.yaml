openapi: "3.1.0"
info:
  version: "2.0"
  title: "API Endpoint Reference"
  description: |
    ### **Tenovos API v2 is currently in design and is not ready for Production use.**  This documentation serves as an early preview in order to retrieve customer feedback. 
    #### Note that the v2 API supports OAUTH Authentication.  Calling an authorization endpoint is no longer required.
    
    
    #### LAST UPDATED: January 23, 2024

    ### Key Changes:
      * Authentication Standards have changed to OAuth.  The use of Basic Authentication (username and password) and Client ID is no longer required.
      * Several new endpoints have been added.
      * All API Response payloads have changed to simplify the data returned and provide more complete datasets so that fewer subsequent API calls are needed for common use cases.
      * Responses no longer include denormalized objects for Metadata and Security.
      * The use of Epoch dates has been entirely removed and replaced with UTC date and time.
      * All API Responses implement paginated results when more than one result is expected.
      * Exponentially improved performance over v1 based on initial testing.
      * Updates to the HTTP Methods used, i.e., GET vs POST for certain endpoints.
      * Errors returned by Tenovos will always be an HTTP Status Code other than '200'.
      * Successful Asynchronous operations return a 202 with a task id that allows you to request status via the Task endpoints.
      * Successful Synchronous __DELETE__ operations return a 204 status.
      * The Base URL is now standardized regardless of customer environment.  All requests for Production go to https://api.tenovos.io/v2
      * Tenovos API v2 uses the latest Open API Specification 3.1.x.

    #### To provide feedback on v2 of the API, please submit an [Idea](https://ideas.tenovos.aha.io) to the Product Team from the Ideas Portal using the API Category.

    ### API version 1.x is expected to be supported until July, 2025.  Customers may leverage both v1 and v2 at the same time while transitioning to v2.

    ### Check back each week as we publish additional endpoints!
  termsOfService: https://tenovos.com/terms-of-service
  contact:
    email: product@tenovos.com
  license:
    name: Tenovos Active Story Management
    url: https://www.tenovos.com/
externalDocs:
  description: Find out more about Tenovos
  url: https://tenovos.com
servers:
  - url: 'https://api.tenovos.io'
  - url: 'https://api.uat.tenovos.io'
security: 
  -  OAuth2:
      - admin
      - user
tags:
  $ref: v2/commons/tags.yaml
paths:
  /search/assets:
    get:
      operationId: "searchByAssetType"
      tags:
        - SEARCH
      summary: Search Assets
      security: 
        -  OAuth2: [user]
      description: Tenovos Search. The Search endpoint is used to search the system for any type of an object.  For search against non-assets, such as Collections, Users, etc., please refer to the relevant section.
      parameters:
        - $ref: v2/parameters/before.yaml
        - $ref: v2/parameters/after.yaml
        - $ref: v2/parameters/content-type.yaml
        - $ref: v2/parameters/authorization.yaml
      requestBody:
        content:
          application/json:
            schema:
              $ref: v2/requests/search.yaml
      responses:
        '200':
          description: "Successful Request. Search Results Returned."
          content:
            application/json:
              schema:
                $ref: v2/responses/search.yaml
        '400':
          $ref: v2/schemas/400.yaml
        '401':
          $ref: v2/schemas/401.yaml
        '403':
          $ref: v2/schemas/403.yaml
        '503':
          $ref: v2/schemas/503.yaml
  /search/users/{searchTerm}:
    get:
      operationId: "searchUsers"
      tags:
        - SEARCH
      summary: Search Users
      security: 
        -  OAuth2: [user]
      description: Tenovos Search. The Search endpoint is used to search the system for users based on matching user profile information.
      parameters:
        - $ref: v2/parameters/before.yaml
        - $ref: v2/parameters/after.yaml
        - $ref: v2/parameters/searchTerms.yaml
        - $ref: v2/parameters/content-type.yaml
        - $ref: v2/parameters/authorization.yaml
      responses:
        '200':
          description: "Successful Request. Search Results Returned."
          content:
            application/json:
              schema:
                $ref: v2/responses/users.yaml
        '400':
          $ref: v2/schemas/400.yaml
        '401':
          $ref: v2/schemas/401.yaml
        '403':
          $ref: v2/schemas/403.yaml
        '503':
          $ref: v2/schemas/503.yaml
  /assets/technical-metadata/{assetId}:
    get: 
      operationId: "getTechnicalMetadataByAssetId"
      tags:
        - ASSETS
      summary: Technical Metadata
      security: 
        -  OAuth2: [user]
      description: Get Technical Metadata by Asset Id.  Retrieve the Technical Metadata for a specific Asset in Tenovos.  Because technical metadata attributes vary based on organization, industry standards, and file type, only one example is provided.
      parameters: 
        - $ref: v2/parameters/assetId.yaml
        - $ref: v2/parameters/content-type.yaml
        - $ref: v2/parameters/authorization.yaml
      responses: 
        '200':
          description: "Successful Request. Technical Metadata Returned."
          content:
            application/json:
              schema:
                $ref: v2/responses/tech-metadata.yaml
        '400':
          $ref: v2/schemas/400.yaml
        '401':
          $ref: v2/schemas/401.yaml
        '403':
          $ref: v2/schemas/403.yaml
        '503':
          $ref: v2/schemas/503.yaml
  /assets/metadata-template/{metadataTemplateId}: 
    get: 
      operationId: getAssetsByMetadataTemplate
      tags: 
        -  ASSETS
      summary: Assets by Metadata Template 
      security: 
        -  OAuth2: []
      description: Use this endpoint to get a list of assets by metadata template.  Results are returned 50 at a time.  Use the cursor to retrieve the next batch of 50 on each call after the initial call.
      parameters: 
        - $ref: v2/parameters/metadataTemplateId.yaml
        - $ref: v2/parameters/before.yaml
        - $ref: v2/parameters/after.yaml
        - $ref: v2/parameters/content-type.yaml
        - $ref: v2/parameters/authorization.yaml 
      responses: 
        '200':
          description: "Successful Request. List of Assets Returned."
          content:
            application/json:
              schema:
                $ref: v2/responses/assets-lite.yaml
        '400':
          $ref: v2/schemas/400.yaml
        '401':
          $ref: v2/schemas/401.yaml
        '403':
          $ref: v2/schemas/403.yaml
        '503':
          $ref: v2/schemas/503.yaml
  /assets:
    delete:
      operationId: deleteAsset
      tags: 
        -  ASSETS
      summary: Delete Assets
      security: 
        -  OAuth2: [user]
      description: Soft deletes the assets and sends it to the Tenovos Recycle Bin.  The assets will no longer show up and be available for users, but can still be restored.
      parameters:
        - $ref: v2/parameters/content-type.yaml
        - $ref: v2/parameters/authorization.yaml
      requestBody: 
        content:
          application/json:
            schema: 
              type: array
              items: 
                type: string
                format: uuid
                description: Unique Asset Identifiers
      responses:
        '202':
          description: "Successful Request. Batch deletion of assets has started."
          content:
            application/json:
              schema:
                $ref: v2/responses/taskId.yaml 
        '204':
          description: "Successful Request. Assets Deleted Successfully."
        '400':
          $ref: v2/schemas/400.yaml
        '401':
          $ref: v2/schemas/401.yaml
        '403':
          $ref: v2/schemas/403.yaml
        '503':
          $ref: v2/schemas/503.yaml
  /assets/{assetId}: 
    get:
      operationId: getAssetById
      tags: 
        -  ASSETS
      summary: Asset
      security: 
        -  OAuth2: [user]
      description: Get all information and metadata for a specific Asset.
      parameters:
        - $ref: v2/parameters/latest.yaml
        - $ref: v2/parameters/assetId.yaml
        - $ref: v2/parameters/content-type.yaml
        - $ref: v2/parameters/authorization.yaml
      responses: 
        '200':
          description: "Successful Request. Get Asset Response Returned."
          content:
            application/json:
              schema:
                $ref: v2/responses/asset.yaml
        '400':
          $ref: v2/schemas/400.yaml
        '401':
          $ref: v2/schemas/401.yaml
        '403':
          $ref: v2/schemas/403.yaml
        '503':
          $ref: v2/schemas/503.yaml
  /users:
    get: 
      operationId: getUsers
      tags: 
        -  PEOPLE
      summary: All Users
      security: 
        -  OAuth2: [admin]
      description: Get a list of all users.
      parameters:
        - $ref: v2/parameters/before.yaml 
        - $ref: v2/parameters/after.yaml
        - $ref: v2/parameters/content-type.yaml
        - $ref: v2/parameters/authorization.yaml 
      responses: 
        '200':
          description: "Successful Request. Get User Profile Result Returned."
          content:
            application/json:
              schema:
                $ref: v2/responses/users.yaml
        '400':
          $ref: v2/schemas/400.yaml
        '401':
          $ref: v2/schemas/401.yaml
        '403':
          $ref: v2/schemas/403.yaml
        '503':
          $ref: v2/schemas/503.yaml
  /users/create:
    post: 
      operationId: createUser
      summary: Create Users
      tags: 
        -  PEOPLE
      security: 
        -  OAuth2: [admin]
      description: Use this endpoint to create new user accounts in Tenovos, whether local (username and password) or a federated (SSO) user account. Depending on the quantity of users being created, and current processing times, we will determine how best to process your request. If run as a batch, the response will be an HTTP Status Code of 202, and the task id will be returned.  Use the task endpoint to request the status and other task information. 
      requestBody:
        content:
          application/json:
            schema:
              $ref: v2/requests/user.yaml
      parameters: 
        - $ref: v2/parameters/content-type.yaml
        - $ref: v2/parameters/authorization.yaml
      responses: 
        '200':
          description: "Successful Request. User Created Successfully."
          content:
            application/json:
              schema:
                $ref: v2/responses/userIds.yaml
        '202':
          description: "Successful Request. Batch creation of users has started."
          content:
            application/json:
              schema:
                $ref: v2/responses/taskId.yaml
        '400':
          $ref: v2/schemas/400.yaml
        '401':
          $ref: v2/schemas/401.yaml
        '403':
          $ref: v2/schemas/403.yaml
        '503':
          $ref: v2/schemas/503.yaml
  /users/{userId}:
    get:
      operationId: getUserById
      tags:
        - PEOPLE
      summary: User by ID
      security: 
        -  OAuth2: [admin]
      description: Get a single User Profile by User ID
      parameters:
        - $ref: v2/parameters/userId.yaml
        - $ref: v2/parameters/content-type.yaml
        - $ref: v2/parameters/authorization.yaml
      responses: 
        '200':
          description: "Successful Request. Get User Profile Result Returned."
          content:
            application/json:
              schema:
                $ref: v2/schemas/user.yaml
        '400':
          $ref: v2/schemas/400.yaml
        '401':
          $ref: v2/schemas/401.yaml
        '403':
          $ref: v2/schemas/403.yaml
        '503':
          $ref: v2/schemas/503.yaml
    delete:
      operationId: deleteUser
      summary: Delete User
      tags: 
        -  PEOPLE
      security: 
        -  OAuth2: [admin]
      description: Delete a User Account.  User Management Role Privilege is required.  Note, user creation and last updated data on assets will remain on the assets even after their account is deleted.
      parameters: 
        - $ref: v2/parameters/userId.yaml
        - $ref: v2/parameters/content-type.yaml
        - $ref: v2/parameters/authorization.yaml
      requestBody: 
        content: 
          application/json:
            schema: 
              $ref: v2/requests/deleteUser.yaml
      responses: 
        '202':
          description: "Successful Request. User was Deleted Successfully."
          content:
            application/json:
              schema:
                $ref: v2/responses/taskId.yaml
        '400':
          $ref: v2/schemas/400.yaml
        '401':
          $ref: v2/schemas/401.yaml
        '403':
          $ref: v2/schemas/403.yaml
        '503':
          $ref: v2/schemas/503.yaml
    patch: 
      operationId: updateUser
      summary: Update User
      tags: 
        -  PEOPLE
      security: 
        -  OAuth2: []
      description: Use this endpoint to update a users profile information, role, or group assignments.  If any data is not changing, please omit it from your request as only the data that is changing is needed.
      requestBody:
        content:
          application/json:
            schema:
              $ref: v2/requests/patchUser.yaml
      parameters: 
        - $ref: v2/parameters/userId.yaml
        - $ref: v2/parameters/content-type.yaml
        - $ref: v2/parameters/authorization.yaml 
      responses: 
        '200':
          description: "Successful Request. User Updated Successfully."
          content:
            application/json:
              schema:
                $ref: v2/responses/userIds.yaml
        '400':
          $ref: v2/schemas/400.yaml
        '401':
          $ref: v2/schemas/401.yaml
        '403':
          $ref: v2/schemas/403.yaml
        '503':
          $ref: v2/schemas/503.yaml
  /users/{userId}/update-password:
    patch: 
      operationId: updateUserPassword
      tags: 
        - PEOPLE
      summary: Update User Password
      security: 
        -  OAuth2: [user]
      description: Change the password for the Local User Account.
      parameters:
        - $ref: v2/parameters/userId.yaml
        - $ref: v2/parameters/content-type.yaml
        - $ref: v2/parameters/authorization.yaml
      requestBody:
        description: Provide the new password
        required: true
        content:
          password:
            schema:
              type: string
              example: newPassword123
      responses: 
        '200':
          description: "Successful Request. Password Changed Successfully."
        '400':
          $ref: v2/schemas/400.yaml
        '401':
          $ref: v2/schemas/401.yaml
        '403':
          $ref: v2/schemas/403.yaml
        '503':
          $ref: v2/schemas/503.yaml
  /users/{userId}/impersonate:
    post: 
      operationId: impersonateUser
      summary: Impersonate User
      tags: 
        -  PEOPLE
      security: 
        -  OAuth2: [admin]
      description: Create an impersonated session for a given user.
      parameters: 
        - $ref: v2/parameters/userId.yaml
        - $ref: v2/parameters/content-type.yaml
        - $ref: v2/parameters/authorization.yaml
      responses: 
        '200':
          description: "Successful Request. Impersonation Token Issued Successfully."
          content:
            application/json:
              schema:
                $ref: v2/responses/impersonation.yaml
        '400':
          $ref: v2/schemas/400.yaml
        '401':
          $ref: v2/schemas/401.yaml
        '403':
          $ref: v2/schemas/403.yaml
        '503':
          $ref: v2/schemas/503.yaml
  /collections:
    get: 
      operationId: getCollections
      tags: 
        -  COLLECTIONS
      summary: Collections
      security: 
        -  OAuth2: [user]
      description: Retrieves a listing of collections that are available.  Collections may contain assets, other collections, or a combination of both.
      parameters: 
        - $ref: v2/parameters/before.yaml
        - $ref: v2/parameters/after.yaml
        - $ref: v2/parameters/content-type.yaml
        - $ref: v2/parameters/authorization.yaml 
      responses: 
        '200':
          description: "Successful Request. Collections Retrieved Successfully."
          content:
            application/json:
              schema:
                type: object
                properties: 
                  collections:
                    type: array
                    minItems: 1
                    maxItems: 50
                    items:
                      $ref: v2/responses/getCollection.yaml
                  pagination:
                    $ref: v2/responses/pagination.yaml
        '400':
          $ref: v2/schemas/400.yaml
        '401':
          $ref: v2/schemas/401.yaml
        '403':
          $ref: v2/schemas/403.yaml
        '503':
          $ref: v2/schemas/503.yaml
    post: 
      operationId: createCollection
      tags: 
        - COLLECTIONS
      summary: Create a Collection
      security: 
        -  OAuth2: [user]
      description: Use this endpoint to create a Collection of Assets and assign Assets to the Collection.
      parameters: 
        - $ref: v2/parameters/content-type.yaml
        - $ref: v2/parameters/authorization.yaml  
      requestBody:
        content:
          application/json:
            schema:
              $ref: v2/schemas/collection.yaml
      responses: 
        '200':
          description: "Successful Request. Collection Created Successfully."
          content:
            application/json:
              schema:
                $ref: v2/responses/createCollection.yaml
        '400':
          $ref: v2/schemas/400.yaml
        '401':
          $ref: v2/schemas/401.yaml
        '403':
          $ref: v2/schemas/403.yaml
        '503':
          $ref: v2/schemas/503.yaml
  /collections/{collectionId}:
    get: 
      operationId: getCollection
      tags: 
        -  COLLECTIONS
      summary: Collection
      security: 
        -  OAuth2: [user]
      description: Retrieve a single Collection by the Collection ID.  The Collection may be Private or Shared.  **Requires the Private and/or Shared Collection Role Privilege.**
      parameters: 
        - $ref: v2/parameters/collectionId.yaml
        - $ref: v2/parameters/content-type.yaml
        - $ref: v2/parameters/authorization.yaml 
      responses: 
        '200':
          description: "Successful Request. Collection Created Successfully."
          content:
            application/json:
              schema:
                $ref: v2/responses/getCollection.yaml
        '400':
          $ref: v2/schemas/400.yaml
        '401':
          $ref: v2/schemas/401.yaml
        '403':
          $ref: v2/schemas/403.yaml
        '503':
          $ref: v2/schemas/503.yaml
    delete: 
      operationId: deleteCollection
      tags: 
        -  COLLECTIONS
      summary: Delete a Collection
      security: 
        -  OAuth2: [user]
      description: This endpoint deletes a Collection based on the Collection ID.  Assets within the Collection will not be deleted. The User submitting the request to delete a Private Collection must be the account used to create it. Shared Collections may only be deleted by Users with the Purge Security Role Privilege.
      parameters: 
        - $ref: v2/parameters/collectionId.yaml
        - $ref: v2/parameters/content-type.yaml
        - $ref: v2/parameters/authorization.yaml 
      responses: 
        '204':
          description: "Successful Request. Collection Deleted Successfully."
          content:
            application/json:
              schema:
                $ref: v2/schemas/204-sync.yaml
        '400':
          $ref: v2/schemas/400.yaml
        '401':
          $ref: v2/schemas/401.yaml
        '403':
          $ref: v2/schemas/403.yaml
        '503':
          $ref: v2/schemas/503.yaml
    patch: 
      operationId: updateCollection
      tags: 
        -  COLLECTIONS
      summary: Update a Collection
      security: 
        -  OAuth2: [user]
      description: This endpoint updates a Collection based on the Collection ID.  Use the assets object to provide the updated list of assets for this collection, any assets in the collection who's ID is not provided will be removed from the collection.  The same applies for Security Templates.  Requests should only contain the properties for which there are changes to the data, otherwise omit.
      parameters: 
        - $ref: v2/parameters/collectionId.yaml 
        - $ref: v2/parameters/content-type.yaml
        - $ref: v2/parameters/authorization.yaml
      requestBody:
        content:
          application/json:
            schema:
              $ref: v2/requests/collection.yaml
      responses: 
        '200':
          description: "Successful Request. Collection Updated Successfully."
          content:
            application/json:
              schema:
                $ref: v2/responses/getCollection.yaml
        '400':
          $ref: v2/schemas/400.yaml
        '401':
          $ref: v2/schemas/401.yaml
        '403':
          $ref: v2/schemas/403.yaml
        '503':
          $ref: v2/schemas/503.yaml
  /metadata/templates:
    get: 
      operationId: getMetadataTemplates
      tags: 
        -  METADATA
      summary: Metadata Templates
      security: 
        -  OAuth2: [admin]
      description: Get all Metadata Templates configured in the system, including groups, group order, and attributes in each group.  
      parameters: 
        - $ref: v2/parameters/before.yaml
        - $ref: v2/parameters/after.yaml
        - $ref: v2/parameters/content-type.yaml
        - $ref: v2/parameters/authorization.yaml 
      responses: 
        '200':
          description: "Successful Request. Metadata Templates Retrieved Successfully."
          content:
            application/json:
              schema:
                $ref: v2/responses/metadata/templates.yaml
        '400':
          $ref: v2/schemas/400.yaml
        '401':
          $ref: v2/schemas/401.yaml
        '403':
          $ref: v2/schemas/403.yaml
        '503':
          $ref: v2/schemas/503.yaml
  /metadata/templates/{metadataTemplateId}:
    get: 
      operationId: getMetadataTemplate
      tags: 
        -  METADATA
      summary: Metadata Template Details
      security: 
        -  OAuth2: []
      description: Get a Metadata Template configured in the system, including groups, group order, and attributes in each group.  
      parameters: 
        - $ref: v2/parameters/metadataTemplateId.yaml 
        - $ref: v2/parameters/content-type.yaml
        - $ref: v2/parameters/authorization.yaml
      responses: 
        '200':
          description: "Successful Request. Metadata Template Retrieved Successfully."
          content:
            application/json:
              schema:
                $ref: v2/responses/metadata/templateDetails.yaml
        '400':
          $ref: v2/schemas/400.yaml
        '401':
          $ref: v2/schemas/401.yaml
        '403':
          $ref: v2/schemas/403.yaml
        '503':
          $ref: v2/schemas/503.yaml
  /tasks/{taskId}:
    get: 
      operationId: getTask
      tags: 
        -  TASKS
      summary: Task Status
      security: 
        -  OAuth2: []
      description: Tasks are longer running operations where a response cannot be returned in an appropriate time.  Get the latest status of a task based on the task id returned from Tenovos for an asynchronous operation (HTTP Response Code 202).
      parameters: 
        - $ref: v2/parameters/taskId.yaml
        - $ref: v2/parameters/content-type.yaml
        - $ref: v2/parameters/authorization.yaml
      responses: 
        '200':
          description: "Successful Request. Task Retrieved Successfully."
          content:
            application/json:
              schema:
                $ref: v2/responses/task.yaml
        '400':
          $ref: v2/schemas/400.yaml
        '401':
          $ref: v2/schemas/401.yaml
        '403':
          $ref: v2/schemas/403.yaml
        '503':
          $ref: v2/schemas/503.yaml
  /tasks:
    get: 
      operationId: getTasks
      tags: 
        -  TASKS
      summary: All Tasks
      security: 
        -  OAuth2: []
      description: Tasks are longer running operations where a response cannot be returned in an appropriate time.  This endpoint retrieves a listing of all incomplete tasks that are still in queue or processing.
      parameters: 
        - $ref: v2/parameters/taskStatus.yaml
        - $ref: v2/parameters/content-type.yaml
        - $ref: v2/parameters/authorization.yaml 
      responses: 
        '200':
          description: "Successful Request. Tasks Retrieved Successfully."
          content:
            application/json:
              schema:
                type: object
                properties: 
                  tasks:
                    type: array
                    minItems: 1
                    maxItems: 50
                    items: 
                      $ref: v2/responses/task.yaml
                  pagination:
                    $ref: v2/responses/pagination.yaml
        '400':
          $ref: v2/schemas/400.yaml
        '401':
          $ref: v2/schemas/401.yaml
        '403':
          $ref: v2/schemas/403.yaml
        '503':
          $ref: v2/schemas/503.yaml
  /configurations:
    get: 
      operationId: getConfigurations
      tags: 
        -  CONFIGURATIONS
      summary: Configurations
      security: 
        -  OAuth2: []
      description: Retrieve system level configuration values.  Branding must be applied via the User Interface.  Note - These configurations apply at the system level and may be overridden by user preferences.
      parameters: 
        - $ref: v2/parameters/content-type.yaml
        - $ref: v2/parameters/authorization.yaml 
      responses: 
        '200':
          description: "Successful Request. Configurations Retrieved Successfully."
          content:
            application/json:
              schema:
                  $ref: v2/responses/configurations.yaml
        '400':
          $ref: v2/schemas/400.yaml
        '401':
          $ref: v2/schemas/401.yaml
        '403':
          $ref: v2/schemas/403.yaml
        '503':
          $ref: v2/schemas/503.yaml
    patch: 
      operationId: updateConfigurations
      tags: 
        -  CONFIGURATIONS
      summary: Update Configurations
      security: 
        -  OAuth2: []
      description: Update a configuration item by sending **only the properties you would like to update**.  The request payload should only contain those properties which you are updating.  If updating branding, use the Upload endpoint first to get a pre-signed url, upload the file to the S3 bucket using a file transfer utility and then send the published url in this request.
      parameters: 
        - $ref: v2/parameters/content-type.yaml
        - $ref: v2/parameters/authorization.yaml 
      requestBody: 
        content: 
          application/json:
            schema: 
              $ref: v2/requests/configurations.yaml   
      responses: 
        '200':
          description: "Successful Request. Configurations Updated Successfully."
        '400':
          $ref: v2/schemas/400.yaml
        '401':
          $ref: v2/schemas/401.yaml
        '403':
          $ref: v2/schemas/403.yaml
        '503':
          $ref: v2/schemas/503.yaml
  /proofing:
    get:
      operationId: getProofs
      tags: 
        -  PROOFING
      summary: Active Proofs
      security: 
        -  OAuth2: []
      description: Retrieve a list of Proofs in an active status (not approved).   
      parameters: 
        - $ref: v2/parameters/before.yaml
        - $ref: v2/parameters/after.yaml
        - $ref: v2/parameters/content-type.yaml
        - $ref: v2/parameters/authorization.yaml   
      responses: 
        '200':
          description: "Successful Request. Proofs Retrieved Successfully."
          content:
            application/json:
              schema:
                  $ref: v2/responses/proofs.yaml
        '400':
          $ref: v2/schemas/400.yaml
        '401':
          $ref: v2/schemas/401.yaml
        '403':
          $ref: v2/schemas/403.yaml
        '503':
          $ref: v2/schemas/503.yaml
  /proofing/{proofId}:
    get:
      operationId: getProof
      tags: 
        -  PROOFING
      summary: Proof
      security: 
        -  OAuth2: []
      description: Retrieve a Proof that is in any status.   
      parameters: 
        - $ref: v2/parameters/before.yaml
        - $ref: v2/parameters/after.yaml
        - $ref: v2/parameters/proofId.yaml
        - $ref: v2/parameters/content-type.yaml
        - $ref: v2/parameters/authorization.yaml   
      responses: 
        '200':
          description: "Successful Request. Proofs Retrieved Successfully."
          content:
            application/json:
              schema:
                  $ref: v2/schemas/proof.yaml
        '400':
          $ref: v2/schemas/400.yaml
        '401':
          $ref: v2/schemas/401.yaml
        '403':
          $ref: v2/schemas/403.yaml
        '503':
          $ref: v2/schemas/503.yaml
  /proofing/users:
    get: 
      operationId: getProofingUsers
      tags: 
        -  PEOPLE
      summary: Proofing Users
      description: Retrieve a list of user accounts configured for proofing and user metadata.
      parameters: 
        - $ref: v2/parameters/before.yaml
        - $ref: v2/parameters/after.yaml
        - $ref: v2/parameters/content-type.yaml
        - $ref: v2/parameters/authorization.yaml   
      responses: 
        '200':
          description: "Successful Request. Proofing Users Retrieved Successfully."
          content:
            application/json:
              schema:
                  $ref: v2/responses/proofUsers.yaml
        '400':
          $ref: v2/schemas/400.yaml
        '401':
          $ref: v2/schemas/401.yaml
        '403':
          $ref: v2/schemas/403.yaml
        '503':
          $ref: v2/schemas/503.yaml
  /security/templates: 
    get: 
      operationId: getSecurityTemplates
      tags: 
        -  SECURITY
      summary: Security Templates
      security: 
        -  OAuth2: []
      description: Retrieves a collection of Security Templates.  There is no restriction to the data returned, all security templates configured in the system will be returned.
      parameters: 
        - $ref: v2/parameters/content-type.yaml
        - $ref: v2/parameters/authorization.yaml
      responses: 
        '200':
          description: "Successful Request. Security Templates Retrieved Successfully."
          content:
            application/json:
              schema:
                  $ref: v2/responses/security-templates.yaml
        '400':
          $ref: v2/schemas/400.yaml
        '401':
          $ref: v2/schemas/401.yaml
        '403':
          $ref: v2/schemas/403.yaml
        '503':
          $ref: v2/schemas/503.yaml
  /security/permissions:
    get: 
      operationId: getPermissions
      tags: 
        -  SECURITY
      summary: Permissions
      security: 
        -  OAuth2: []
      description: Retrieves a collection of available permissions in Tenovos.  Returns all available permissions that can be assigned to a User Group on Security Templates.  Permissions are applied to Security Templates and can differ for each user group.  Permissions follow a most inclusive model of inheritance as users can belong to more than one group, and an asset can have more than one security template.
      parameters: 
        - $ref: v2/parameters/before.yaml
        - $ref: v2/parameters/after.yaml
        - $ref: v2/parameters/content-type.yaml
        - $ref: v2/parameters/authorization.yaml
      responses: 
        '200':
          description: "Successful Request. Security Permissions Retrieved Successfully."
          content:
            application/json:
              schema:
                  $ref: v2/responses/permissions.yaml
        '400':
          $ref: v2/schemas/400.yaml
        '401':
          $ref: v2/schemas/401.yaml
        '403':
          $ref: v2/schemas/403.yaml
        '503':
          $ref: v2/schemas/503.yaml
  /security/privileges:
    get:
      operationId: getPrivileges
      tags: 
        -  SECURITY
      summary: Privileges
      security: 
        -  OAuth2: []
      description: Retrieves a collection of available privileges in Tenovos.  Returns all available privileges enabled for your instance.
      parameters: 
        - $ref: v2/parameters/before.yaml
        - $ref: v2/parameters/after.yaml
        - $ref: v2/parameters/content-type.yaml
        - $ref: v2/parameters/authorization.yaml
      responses: 
        '200':
          description: "Successful Request. Security Privileges Retrieved Successfully."
          content:
            application/json:
              schema:
                  $ref: v2/responses/privileges.yaml
        '400':
          $ref: v2/schemas/400.yaml
        '401':
          $ref: v2/schemas/401.yaml
        '403':
          $ref: v2/schemas/403.yaml
        '503':
          $ref: v2/schemas/503.yaml
  /security/roles:
    get: 
      operationId: getRoles
      tags: 
        -  SECURITY
      summary: Roles
      security: 
        -  OAuth2: []
      description: Retrieves a collection of all Roles configured in your instance.  
      parameters: 
        - $ref: v2/parameters/content-type.yaml
        - $ref: v2/parameters/authorization.yaml
      responses: 
        '200':
          description: "Successful Request. Security Roles Retrieved Successfully."
          content:
            application/json:
              schema:
                  $ref: v2/responses/roles.yaml
        '400':
          $ref: v2/schemas/400.yaml
        '401':
          $ref: v2/schemas/401.yaml
        '403':
          $ref: v2/schemas/403.yaml
        '503':
          $ref: v2/schemas/503.yaml
    post: 
      operationId: createRoles
      tags: 
        -  SECURITY
      summary: Create Roles
      description: Create one or more roles.
      parameters: 
        - $ref: v2/parameters/content-type.yaml
        - $ref: v2/parameters/authorization.yaml
      requestBody: 
        content: 
          application/json:
            schema: 
              $ref: v2/requests/roles.yaml
      responses: 
        '200':
          description: "Successful Request. Security Roles Created Successfully."
          content: 
            application/json:
              schema: 
                type: array
                items: 
                  $ref: v2/responses/roleId.yaml
        '202':
          description: "Successful Request. Task Started Successfully."
          content:
            application/json:
              schema: 
                $ref: v2/responses/taskId.yaml
        '400':
          $ref: v2/schemas/400.yaml
        '401':
          $ref: v2/schemas/401.yaml
        '403':
          $ref: v2/schemas/403.yaml
        '503':
          $ref: v2/schemas/503.yaml
  /security/privileges/{roleId}:
    get: 
      operationId: getRolePrivileges
      tags: 
        -  SECURITY
      summary: Role Privileges
      description: Retrieve a listing of enabled privileges for a given role.
      parameters: 
        - $ref: v2/parameters/before.yaml
        - $ref: v2/parameters/after.yaml
        - $ref: v2/parameters/roleId.yaml
        - $ref: v2/parameters/content-type.yaml
        - $ref: v2/parameters/authorization.yaml 
      responses: 
        '200':
          description: "Successful Request. Security Roles Privileges Retrieved Successfully."
          content: 
            application/json:
              schema: 
                $ref: v2/responses/rolePrivileges.yaml
        '400':
          $ref: v2/schemas/400.yaml
        '401':
          $ref: v2/schemas/401.yaml
        '403':
          $ref: v2/schemas/403.yaml
        '503':
          $ref: v2/schemas/503.yaml
  /security/groups:
    get: 
      operationId: getUserGroups
      tags: 
        -  SECURITY
      summary: Groups
      security: 
        -  OAuth2: []
      description: Retrieves a collection of available user security groups.  Returns all available groups enabled for your instances.  Use this endpoint to get all user groups available to be assigned to a user account.
      parameters: 
        - $ref: v2/parameters/before.yaml
        - $ref: v2/parameters/after.yaml
        - $ref: v2/parameters/content-type.yaml
        - $ref: v2/parameters/authorization.yaml
      responses: 
        '200':
          description: "Successful Request. Security Groups Retrieved Successfully."
          content:
            application/json:
              schema:
                  $ref: v2/responses/groups.yaml
        '400':
          $ref: v2/schemas/400.yaml
        '401':
          $ref: v2/schemas/401.yaml
        '403':
          $ref: v2/schemas/403.yaml
        '503':
          $ref: v2/schemas/503.yaml
    post:
      operationId: createGroup
      tags: 
        -  SECURITY
      summary: Create Groups
      security: 
        -  OAuth2: []
      description: Create Security User Groups.  Requests can contain 1-50 user groups.
      parameters: 
        - $ref: v2/parameters/content-type.yaml
        - $ref: v2/parameters/authorization.yaml
      requestBody:
        content:
          application/json:
            schema:
              $ref: v2/requests/groups.yaml
      responses:
        '200':
          description: "Successful Request. Security Groups Created Successfully."
          content:
            application/json:
              schema:
                  $ref: v2/responses/groups.yaml
        '400':
          $ref: v2/schemas/400.yaml
        '401':
          $ref: v2/schemas/401.yaml
        '403':
          $ref: v2/schemas/403.yaml
        '503':
          $ref: v2/schemas/503.yaml
  /security/permissions/{securityTemplateId}:
    get: 
      operationId: getGroupPermissionsBySecurityTemplate
      tags: 
        -  SECURITY
      summary: Group Permissions
      security: 
        -  OAuth2: [admin]
      description: Retrieves a listing of User Group permissions for a given security template.
      parameters: 
        - $ref: v2/parameters/before.yaml
        - $ref: v2/parameters/after.yaml
        - $ref: v2/parameters/securityTemplateId.yaml
        - $ref: v2/parameters/content-type.yaml
        - $ref: v2/parameters/authorization.yaml
      responses: 
        '200':
          description: "Successful Request. Security Groups Created Successfully."
          content:
            application/json:
              schema:
                  $ref: v2/responses/groupPermissions.yaml
        '400':
          $ref: v2/schemas/400.yaml
        '401':
          $ref: v2/schemas/401.yaml
        '403':
          $ref: v2/schemas/403.yaml
        '503':
          $ref: v2/schemas/503.yaml
  /share/assets:
    post: 
      operationId: ShareAssets
      tags: 
        -  SHARING
      summary: Share Assets
      security: 
        -  OAuth2: []
      description: Share Multiple Assets at a time with internal or external persons.
      parameters: 
        - $ref: v2/parameters/content-type.yaml
        - $ref: v2/parameters/authorization.yaml
      requestBody: 
        content:
          application/json:
            schema:
              $ref: v2/requests/shareAssets.yaml 
      responses: 
        '200':
          description: "Successful Request. Assets shared Successfully."
        '400':
          $ref: v2/schemas/400.yaml
        '401':
          $ref: v2/schemas/401.yaml
        '403':
          $ref: v2/schemas/403.yaml
        '503':
          $ref: v2/schemas/503.yaml   
  /share/collections/{collectionId}:
    post:
      operationId: shareCollection
      tags: 
        - SHARING
      summary: Share a Collection
      security: 
        -  OAuth2: []
      description: Share a Collection, internally or externally.  
      parameters: 
        - $ref: v2/parameters/collectionId.yaml
        - $ref: v2/parameters/content-type.yaml
        - $ref: v2/parameters/authorization.yaml
      requestBody: 
        content:
          application/json:
            schema: 
              $ref: v2/requests/shareCollection.yaml
      responses: 
        '200':
          description: "Successful Request. Collection Shared Successfully."
        '400':
          $ref: v2/schemas/400.yaml
        '401':
          $ref: v2/schemas/401.yaml
        '403':
          $ref: v2/schemas/403.yaml
        '503':
          $ref: v2/schemas/503.yaml
  /relationships/create:
    post: 
      operationId: createRelationships
      tags: 
        -  RELATIONSHIPS
      summary: Create Relationships
      security: 
        -  OAuth2: []
      description: Create relationships, even with differing relationship types.  To create relationships in bulk with differing relationship types, just simply pass multiple objects in the array for each relationship type being used, where the parent identifier will be the same, however the type and related asset ids would be different.
      parameters: 
        - $ref: v2/parameters/content-type.yaml
        - $ref: v2/parameters/authorization.yaml 
      requestBody: 
        content: 
          application/json:
            schema: 
              $ref: v2/requests/bulkRelationships.yaml
      responses: 
        '202':
          description: "Successful Request. Task Started Successfully."
          content:
            application/json:
              schema: 
                $ref: v2/responses/taskId.yaml
        '400':
          $ref: v2/schemas/400.yaml
        '401':
          $ref: v2/schemas/401.yaml
        '403':
          $ref: v2/schemas/403.yaml
        '503':
          $ref: v2/schemas/503.yaml
  /relationships/types:
    post: 
      operationId: createRelationshipTypes
      tags: 
        - RELATIONSHIPS
      summary: Create Relationship Types
      security: 
        -  OAuth2: []
      description: Retrieve a listing of the types of relationships that exist.  **Note:** The "parent" relationship type is required for all implementations of Tenovos, however a different label can be applied to it, such as "Master" or "Primary".
      parameters:
        - $ref: v2/parameters/content-type.yaml
        - $ref: v2/parameters/authorization.yaml 
      requestBody: 
        content:
          application/json:
            schema: 
              $ref: v2/requests/createRelationshipTypes.yaml
      responses: 
        '200':
          description: "Successful Request. Relationship Types Created Successfully."
          content:
            application/json:
              schema: 
                $ref: v2/responses/relationshipTypes.yaml
        '400':
          $ref: v2/schemas/400.yaml
        '401':
          $ref: v2/schemas/401.yaml
        '403':
          $ref: v2/schemas/403.yaml
        '503':
          $ref: v2/schemas/503.yaml
    get: 
      operationId: getRelationshipTypes
      tags: 
        - RELATIONSHIPS
      summary: Relationship Types
      security: 
        -  OAuth2: []
      description: Retrieve a listing of the types of relationships that exist.  **Note:** The "parent" relationship type is required for all implementations of Tenovos, however a different label can be applied to it, such as "Master" or "Primary".
      parameters:
        - $ref: v2/parameters/before.yaml
        - $ref: v2/parameters/after.yaml
        - $ref: v2/parameters/content-type.yaml
        - $ref: v2/parameters/authorization.yaml 
      responses: 
        '200':
          description: "Successful Request. Relationship Types Retrieved Successfully."
          content:
            application/json:
              schema: 
                $ref: v2/responses/relationshipTypes.yaml
        '400':
          $ref: v2/schemas/400.yaml
        '401':
          $ref: v2/schemas/401.yaml
        '403':
          $ref: v2/schemas/403.yaml
        '503':
          $ref: v2/schemas/503.yaml
  /rights:
    get: 
      operationId: getRights
      tags: 
        -  RIGHTS MANAGEMENT
      summary: Rights Summary
      security: 
        -  OAuth2: [user]
      description: The Rights endpoint retrieves a paginated list of rights objects based on the type of rights object defined in the query parameter.
      parameters: 
        - $ref: v2/parameters/rights-object.yaml
        - $ref: v2/parameters/before.yaml
        - $ref: v2/parameters/after.yaml
        - $ref: v2/parameters/content-type.yaml
        - $ref: v2/parameters/authorization.yaml 
      responses: 
        '200':
          description: "Successful Request. Rights Retrieved Successfully."
          content:
            application/json:
              schema: 
                oneOf: 
                  -  $ref: v2/responses/rights-projects.yaml
                  -  $ref: v2/responses/rights-entities.yaml
                  -  $ref: v2/responses/rights-agreements.yaml
        '400':
          $ref: v2/schemas/400.yaml
        '401':
          $ref: v2/schemas/401.yaml
        '403':
          $ref: v2/schemas/403.yaml
        '503':
          $ref: v2/schemas/503.yaml
  /rights/{rightsId}:
    get: 
      operationId: getRightsObject
      tags: 
        -  RIGHTS MANAGEMENT
      summary: Rights Detail
      security: 
        -  OAuth2: [user]
      description: Retrieve detailed information about a specific Project, Entity or Agreement and it's relationships to other Rights objects.  **Note - The ID provided in the path parameter must be a valid ID for the rights query parameter type.  For example, if the ID for a Project is provided in the path, the query parameter must reflect Project as well or a 400 error will be returned.
      parameters: 
        - $ref: v2/parameters/rightsId.yaml
        - $ref: v2/parameters/rights-object.yaml
        - $ref: v2/parameters/content-type.yaml
        - $ref: v2/parameters/authorization.yaml 
      responses: 
        '200':
          description: "Successful Request. Rights Retrieved Successfully."
          content:
            application/json:
              schema: 
                oneOf: 
                  -  $ref: v2/responses/agreement.yaml
                  -  $ref: v2/responses/entity.yaml
                  -  $ref: v2/responses/project.yaml
        '400':
          $ref: v2/schemas/400.yaml
        '401':
          $ref: v2/schemas/401.yaml
        '403':
          $ref: v2/schemas/403.yaml
        '503':
          $ref: v2/schemas/503.yaml
  /rights/{rightsId}/assets:
    get: 
      operationId: getAssetsByRights
      tags: 
        -  RIGHTS MANAGEMENT
      summary: Assets by Rights
      security: 
        -  OAuth2: [user]
      description: Retrieve a listing of assets based on associated Rights Agreement, Entity, or Project.
      parameters: 
        - $ref: v2/parameters/rightsId.yaml
        - $ref: v2/parameters/content-type.yaml
        - $ref: v2/parameters/authorization.yaml
      responses: 
        '200':
          description: "Successful Request. Rights Retrieved Successfully."
          content:
            application/json:
              schema: 
                $ref: v2/responses/assets-lite.yaml
        '400':
          $ref: v2/schemas/400.yaml
        '401':
          $ref: v2/schemas/401.yaml
        '403':
          $ref: v2/schemas/403.yaml
        '503':
          $ref: v2/schemas/503.yaml
  /triggers:
    get: 
      operationId: getTriggers
      tags: 
        -  TRIGGERS
      summary: Triggers
      security: 
        -  OAuth2: [admin]
      description: Retrieve a listing of existing triggers that are configured for your account.  
      parameters: 
        - $ref: v2/parameters/before.yaml
        - $ref: v2/parameters/after.yaml
        - $ref: v2/parameters/content-type.yaml
        - $ref: v2/parameters/authorization.yaml 
      responses: 
        '200':
          description: "Successful Request. Triggers Retrieved Successfully."
          content:
            application/json:
              schema: 
                $ref: v2/responses/triggers.yaml
        '400':
          $ref: v2/schemas/400.yaml
        '401':
          $ref: v2/schemas/401.yaml
        '403':
          $ref: v2/schemas/403.yaml
        '503':
          $ref: v2/schemas/503.yaml
    post: 
      operationId: createTrigger
      tags: 
        -  TRIGGERS
      summary: Create a Trigger
      security: 
        -  OAuth2: [admin]
      description: Create an automation trigger based on conditional matching of one more conditions followed by an implied action when all conditions are met.  
      parameters: 
        - $ref: v2/parameters/content-type.yaml
        - $ref: v2/parameters/authorization.yaml
      requestBody: 
        content: 
          application/json:
            schema: 
              $ref: v2/schemas/trigger.yaml
      responses: 
        '200':
          description: "Successful Request. Trigger Created Successfully."
          content:
            application/json:
              schema: 
                $ref: v2/responses/triggers.yaml
        '400':
          $ref: v2/schemas/400.yaml
        '401':
          $ref: v2/schemas/401.yaml
        '403':
          $ref: v2/schemas/403.yaml
        '503':
          $ref: v2/schemas/503.yaml
  /transform:
    post: 
      operationId: transform
      tags: 
        -  TRANSFORMS
      summary: Content Transformation
      security: 
        -  OAuth2: [user]
      description: The Tenovos Transformation endpoints allow you to retrieve content with an applied transformation.
      parameters: 
        - $ref: v2/parameters/content-type.yaml
        - $ref: v2/parameters/authorization.yaml
      requestBody: 
        content:
          application/json:
            schema: 
              $ref: v2/requests/transformation.yaml
      responses: 
        '200':
          description: "Successful Request. Transformation Created Successfully."
        '400':
          $ref: v2/schemas/400.yaml
        '401':
          $ref: v2/schemas/401.yaml
        '403':
          $ref: v2/schemas/403.yaml
        '422':
          description: Invalid data.  The convertTo value is not compatible for the asset.
        '503':
          $ref: v2/schemas/503.yaml
  /webhooks/endpoint:
    post: 
      operationId: createSubscription
      tags: 
        -  WEBHOOKS
      summary: Create Endpoint
      security: 
        -  OAuth2: [admin]
      description: Create a subscription based on the topic and event type in order to be notified at your target URL when events about that topic occur.
      parameters: 
        - $ref: v2/parameters/content-type.yaml
        - $ref: v2/parameters/authorization.yaml
      requestBody:
        content:
          application/json:
            schema:
              type: array
              minItems: 1
              maxItems: 50
              items:
                $ref: v2/requests/webhook.yaml
      responses: 
        '200':
          description: "Successful Request. Webhook Subscriptions Created Successfully."
          content:
            application/json:
              schema:
                $ref: v2/responses/webhooks.yaml
        '400':
          $ref: v2/schemas/400.yaml
        '401':
          $ref: v2/schemas/401.yaml
        '403':
          $ref: v2/schemas/403.yaml
        '503':
          $ref: v2/schemas/503.yaml
  /webhooks/endpoint/list:
    get:
      operationId: getEndpointSubscriptionsList
      tags: 
        -  WEBHOOKS
      summary: List Endpoints
      security: 
        -  OAuth2: [admin]
      description: This endpoint returns an array (List) of all endpoints (your endpoints) and the event types subscribed. 
      parameters: 
        - $ref: v2/parameters/before.yaml
        - $ref: v2/parameters/after.yaml
        - $ref: v2/parameters/content-type.yaml
        - $ref: v2/parameters/authorization.yaml
      responses: 
        '200':
          description: "Successful Request. Endpoints Retrieved Successfully."
          content:
            application/json:
              schema: 
                type: array
                items: 
                  $ref: v2/responses/webhooks.yaml
        '400':
          $ref: v2/schemas/400.yaml
        '401':
          $ref: v2/schemas/401.yaml
        '403':
          $ref: v2/schemas/403.yaml
        '503':
          $ref: v2/schemas/503.yaml  
  /webhooks/event-type/list:
    get:
      operationId: getEventTypeList
      tags: 
        -  WEBHOOKS
      summary: List Event Types
      security: 
        -  OAuth2: [admin]
      description: This endpoint returns an array (List) of all event types.
      parameters: 
        - $ref: v2/parameters/before.yaml
        - $ref: v2/parameters/after.yaml
        - $ref: v2/parameters/content-type.yaml
        - $ref: v2/parameters/authorization.yaml
      responses: 
        '200':
          description: "Successful Request. Event Types Retrieved Successfully."
          content:
            application/json:
              schema: 
                type: array
                items: 
                  $ref: v2/responses/eventType.yaml
        '400':
          $ref: v2/schemas/400.yaml
        '401':
          $ref: v2/schemas/401.yaml
        '403':
          $ref: v2/schemas/403.yaml
        '503':
          $ref: v2/schemas/503.yaml  
  /webhooks/endpoint/{id}:
    get: 
      operationId: getEndpointById
      tags: 
        -  WEBHOOKS
      summary: Endpoint by ID
      security: 
        -  OAuth2: [admin]
      description: This endpoint returns a single endpoint and its configuration by ID.
      parameters: 
        - $ref: v2/parameters/subscriptionId.yaml
        - $ref: v2/parameters/content-type.yaml
        - $ref: v2/parameters/authorization.yaml
      responses: 
        '200':
          description: "Successful Request. Endpoint Retrieved Successfully."
          content:
            application/json:
              schema: 
                $ref: v2/responses/webhooks.yaml
        '400':
          $ref: v2/schemas/400.yaml
        '401':
          $ref: v2/schemas/401.yaml
        '403':
          $ref: v2/schemas/403.yaml
        '503':
          $ref: v2/schemas/503.yaml 
    patch: 
      operationId: updateEndpointById
      tags: 
        -  WEBHOOKS
      summary: Update Endpoint
      security: 
        -  OAuth2: [admin]
      description: This endpoint updates a single endpoint and its configuration by ID.
      parameters: 
        - $ref: v2/parameters/subscriptionId.yaml
        - $ref: v2/parameters/content-type.yaml
        - $ref: v2/parameters/authorization.yaml
      requestBody:
        content:
          application/json:
            schema:
              $ref: v2/requests/webhook.yaml
      responses: 
        '200':
          description: "Successful Request. Endpoint Updated Successfully."
          content:
            application/json:
              schema: 
                $ref: v2/responses/webhooks.yaml
        '400':
          $ref: v2/schemas/400.yaml
        '401':
          $ref: v2/schemas/401.yaml
        '403':
          $ref: v2/schemas/403.yaml
        '503':
          $ref: v2/schemas/503.yaml   
    delete:
      operationId: deleteWebhook
      tags:
        - WEBHOOKS
      summary: Delete Endpoint
      security: 
        - OAuth2: [admin]
      description: Delete a subscription you have to a Webhook based on the ID of the Webhook Subscription
      parameters: 
        - $ref: v2/parameters/subscriptionId.yaml
        - $ref: v2/parameters/content-type.yaml
        - $ref: v2/parameters/authorization.yaml
      responses: 
        '200':
          description: "Successful Request. Webhook Subscriptions Deleted Successfully."
          content:
            application/json:
              schema:
                $ref: v2/schemas/200.yaml
        '400':
          $ref: v2/schemas/400.yaml
        '401':
          $ref: v2/schemas/401.yaml
        '403':
          $ref: v2/schemas/403.yaml
        '503':
          $ref: v2/schemas/503.yaml
components:
  securitySchemes:
    $ref: v2/commons/commons.yaml